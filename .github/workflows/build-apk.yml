name: Build Android APK

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
        
    - name: Set up Java 11
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '11'
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          git \
          python3 \
          python3-dev \
          python3-pip \
          python3-setuptools \
          python3-wheel \
          python3-venv \
          libssl-dev \
          libffi-dev \
          libncurses5-dev \
          libsqlite3-dev \
          libreadline-dev \
          libbz2-dev \
          zlib1g-dev \
          libgdbm-dev \
          libdb-dev \
          liblzma-dev \
          libexpat1-dev \
          zip \
          unzip
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install buildozer cython
        
    - name: Cache buildozer global directory
      uses: actions/cache@v4
      with:
        path: .buildozer_global
        key: buildozer-global-${{ hashFiles('buildozer.spec') }}
        
    - name: Cache buildozer directory
      uses: actions/cache@v4
      with:
        path: .buildozer
        key: buildozer-${{ hashFiles('buildozer.spec') }}
        
    - name: Build APK with buildozer
      run: |
        # 设置buildozer全局目录
        export BUILDOZER_GLOBAL_DIR="$(pwd)/.buildozer_global"
        mkdir -p $BUILDOZER_GLOBAL_DIR
        
        # 设置环境变量以自动接受许可证
        export ANDROID_HOME=$HOME/.buildozer/android/platform/android-sdk
        export PATH=$PATH:$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools:$ANDROID_HOME/cmdline-tools/latest/bin
        
        # 自动接受Android SDK许可证
        mkdir -p $ANDROID_HOME/licenses
        echo "24333f8a63b6825ea9c5514f83c2829b004d1fee" > $ANDROID_HOME/licenses/android-sdk-license
        echo "84831b9409646a918e30573bab4c9c91346d8abd" > $ANDROID_HOME/licenses/android-sdk-preview-license
        
        # 初始化buildozer以下载和设置Android SDK
        buildozer android debug --verbose || true
        
        # 确保Android SDK目录存在
        mkdir -p $ANDROID_HOME
        
        # 手动安装cmdline-tools如果不存在
        if [ ! -d "$ANDROID_HOME/cmdline-tools" ]; then
          echo "Installing Android cmdline-tools..."
          cd $ANDROID_HOME
          wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
          unzip -q commandlinetools-linux-9477386_latest.zip
          mkdir -p cmdline-tools/latest
          mv cmdline-tools/* cmdline-tools/latest/ 2>/dev/null || true
          rm -f commandlinetools-linux-9477386_latest.zip
          cd -
        fi
        
        # 创建旧版本sdkmanager的符号链接以兼容buildozer
        mkdir -p $ANDROID_HOME/tools/bin
        ln -sf $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager $ANDROID_HOME/tools/bin/sdkmanager
        
        # 更新PATH以包含新的cmdline-tools和旧路径
        export PATH=$PATH:$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/tools/bin
        
        # 使用sdkmanager安装必要的SDK组件
        yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses || true
        $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "platform-tools" "platforms;android-30" "build-tools;30.0.3" || true
        
        # 再次尝试构建APK
        buildozer android debug
        
    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: android-apk
        path: bin/*.apk
        
    - name: List generated files
      run: |
        echo "Generated APK files:"
        ls -la bin/ || echo "No bin directory found"
        find . -name "*.apk" -type f || echo "No APK files found"